# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lQDysSk-h7BsWL7wh6MHKEFnvZ2aqOLP

**DICODING - HANIF IZZUDIN RAHMAN**
"""

import numpy as np
import pandas as pd
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt
import tensorflow as tf

data_train = pd.read_csv('D202.csv')
data_train.head()

data_train.info()

data_train.isnull().sum()

dates = data_train['DATE'].values
starts  = data_train['START TIME'].values
ends  = data_train['END TIME'].values
usages  = data_train['USAGE'].values

dates

starts

ends

usages

plt.figure(figsize=(15,5))
plt.plot(dates, usages)
plt.title('Usages (KwH)',
          fontsize=20);

from sklearn.model_selection import train_test_split
dates_train, dates_test, usages_train, usages_test = train_test_split(dates, usages, test_size=0.2, random_state=42, shuffle=False)

dates_train

dates_test

usages_train

usages_test

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
    series = tf.expand_dims(series, axis=-1)
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size + 1))
    ds = ds.shuffle(shuffle_buffer)
    ds = ds.map(lambda w: (w[:-1], w[-1:]))
    return ds.batch(batch_size).prefetch(1)

usages_train_windowed = windowed_dataset(usages_train, window_size=60, batch_size=50, shuffle_buffer=500)

usages_test_windowed = windowed_dataset(usages_test, window_size=60, batch_size=50, shuffle_buffer=500)

usages_train_windowed, usages_test_windowed

model = tf.keras.models.Sequential([
  tf.keras.layers.LSTM(60, return_sequences=True),
  tf.keras.layers.LSTM(60),
  tf.keras.layers.Dense(30, activation="relu"),
  tf.keras.layers.Dense(10, activation="relu"),
  tf.keras.layers.Dense(1),
])

optimizer = tf.keras.optimizers.SGD(lr=0.005, momentum=0.9)
model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=["mae"])

# callbacks
mae_threshold = 0.1
print("mae_threshold: ", mae_threshold)
class my_callbacks(tf.keras.callbacks.Callback):
    def on_epoch_end(self, epoch, logs = None):
        if logs.get('mae') <= mae_threshold:
            print('\nFor Epoch', epoch, '\nMAE has reach = %2.2f%%' %(logs['mae']), 'training has been stopped.')
            self.model.stop_training = True

history = model.fit(usages_train_windowed, epochs=100, validation_data=usages_test_windowed, verbose=1, callbacks=[my_callbacks()])

# Visualize
import matplotlib.pyplot as plt
import numpy
# list all data in history
print(history.history.keys())
# summarize history for accuracy
plt.plot(history.history['mae'])
plt.title('model MAE')
plt.ylabel('MAE')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()